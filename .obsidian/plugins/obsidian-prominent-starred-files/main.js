/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProminentStarredFiles
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/main.ts
var ProminentStarredFiles = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.files = /* @__PURE__ */ new Set();
  }
  get bookmarksEnabled() {
    return this.app.internalPlugins.getPluginById("bookmarks").enabled;
  }
  get bookmarks() {
    return this.app.internalPlugins.getPluginById("bookmarks");
  }
  get bookmarkInstance() {
    if (!this.bookmarksEnabled)
      return;
    return this.bookmarks.instance;
  }
  get fileExplorers() {
    return this.app.workspace.getLeavesOfType(
      "file-explorer"
    );
  }
  async onload() {
    console.log("Prominent Starred Files plugin loaded");
    this.app.workspace.onLayoutReady(() => this.checkAndEnable());
  }
  checkAndEnable() {
    setTimeout(() => {
      const self = this;
      if (!this.app.internalPlugins.getPluginById("file-explorer").enabled) {
        new import_obsidian.Notice(
          "The File Explorer core plugin must be enabled to use this plugin."
        );
        const explorer = around(
          this.app.internalPlugins.getPluginById("file-explorer"),
          {
            enable: function(next) {
              return function(b) {
                const apply = next.call(this, b);
                explorer();
                self.checkAndEnable();
                return apply;
              };
            },
            disable: function(next) {
              return function(b) {
                explorer();
                self.checkAndEnable();
                return next.call(this, b);
              };
            }
          }
        );
        this.register(explorer);
        return;
      }
      this.register(
        around(this.bookmarks, {
          enable: function(next) {
            return function(b) {
              const apply = next.call(this, b);
              self.registerHandlers();
              for (let item of self.bookmarkInstance?.items ?? []) {
                self.setIcon(item, "bookmark");
              }
              return apply;
            };
          },
          disable: function(next) {
            return function(b) {
              self.bookmarkHandler();
              self.registerHandlers();
              for (let item of self.bookmarkInstance?.items ?? []) {
                self.removeIcon(item);
              }
              return next.call(this, b);
            };
          }
        })
      );
      if (!this.bookmarksEnabled) {
        new import_obsidian.Notice(
          "The Bookmarks core plugin must be enabled to use this plugin."
        );
      } else {
        this.registerHandlers();
      }
    });
  }
  registerHandlers() {
    const self = this;
    if (this.bookmarksEnabled) {
      for (let item of this.bookmarkInstance?.items ?? []) {
        this.setIcon(item, "bookmark");
      }
      this.bookmarkHandler = around(this.bookmarks.instance, {
        addItem: function(next) {
          return function(file) {
            self.setIcon(file, "bookmark");
            return next.call(this, file);
          };
        },
        removeItem: function(next) {
          return function(file) {
            self.removeIcon(file);
            return next.call(this, file);
          };
        }
      });
      this.register(this.bookmarkHandler);
    }
  }
  setIcon(file, icon, el) {
    if (!this.fileExplorers.length)
      return;
    if (this.files.has(file.path))
      return;
    for (let explorer of this.fileExplorers) {
      const element = el ?? explorer.view?.fileItems?.[file.path]?.titleEl ?? explorer.containerEl.querySelector(
        `.nav-${file.type}-title[data-path="${file.path}"]`
      );
      if (!element)
        continue;
      this.files.add(file.path);
      (0, import_obsidian.setIcon)(element.createDiv("prominent-decorated-file"), icon);
    }
  }
  removeIcon(file) {
    if (!this.fileExplorers.length)
      return;
    for (let explorer of this.fileExplorers) {
      const element = explorer.containerEl.querySelector(
        `.nav-${file.type}-title[data-path="${file.path}"]`
      );
      if (!element)
        continue;
      this.files.delete(file.path);
      const stars = element.querySelectorAll(".prominent-decorated-file");
      if (stars.length)
        stars.forEach((star) => star.detach());
    }
  }
  onunload() {
    console.log("Prominent Files plugin unloaded");
    for (let file of this.bookmarkInstance?.items ?? []) {
      this.removeIcon(file);
    }
  }
};
